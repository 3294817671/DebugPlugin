#pragma once
#include <Windows.h>
#include <winioctl.h>
#define 我的驱动链接  L"\\??\\HZW_Debug_Plugin"
#define IOCTL_UNKNOWN_BASE					            FILE_DEVICE_UNKNOWN
#define IOCTROL_PLUGIN_Initialize                       CTL_CODE(IOCTL_UNKNOWN_BASE, 0x900, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IOCTROL_MDL_WRITE_R0     		                CTL_CODE(IOCTL_UNKNOWN_BASE, 0x901, METHOD_BUFFERED, FILE_SPECIAL_ACCESS) 
#define IOCTROL_MDL_WRITE_R3    		                CTL_CODE(IOCTL_UNKNOWN_BASE, 0x902, METHOD_BUFFERED, FILE_SPECIAL_ACCESS) 
#define IOCTL_Read_PhysicalAddress	                    CTL_CODE(IOCTL_UNKNOWN_BASE, 0x903, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTROL_READ_OR_WRITE		                    CTL_CODE(IOCTL_UNKNOWN_BASE, 0x904, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTL_SET_OR_GET_THREAD_CONTEXT		            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x905, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTL_SUSPENTHREAD_OR_RESUMETHREAD	            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x906, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTROL_PsSuspendProcessOrPsResumProcess		CTL_CODE(IOCTL_UNKNOWN_BASE, 0x907, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_ZwDuplicateObject		                CTL_CODE(IOCTL_UNKNOWN_BASE, 0x908, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_ZwCreateThreadEx		                CTL_CODE(IOCTL_UNKNOWN_BASE, 0x909, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_ZwProtectVirtualMemory		            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x910, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_MmMapViewOfSection		                CTL_CODE(IOCTL_UNKNOWN_BASE, 0x911, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_MmUnMapViewOfSection		            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x912, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_ALLOCATE_MEMORY2    		            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x913, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_OPEN_PROCESS         		            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x914, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_OPEN_THREAD         		            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x915, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)  
#define IOCTROL_HANDLE_TABLE         		            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x916, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_MMCOPYMEMORY         		            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x917, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_GET_CR3              		            CTL_CODE(IOCTL_UNKNOWN_BASE, 0x918, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) 
#define IOCTROL_SET_SYSTEM_NOTIY              		    CTL_CODE(IOCTL_UNKNOWN_BASE, 0x919, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTROL_GET_DEBUGEVENT              		    CTL_CODE(IOCTL_UNKNOWN_BASE, 0x920, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTROL_DBKSUSPENDPROCESS              		    CTL_CODE(IOCTL_UNKNOWN_BASE, 0x921, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTROL_DBKRESUMEPROCESS              		    CTL_CODE(IOCTL_UNKNOWN_BASE, 0x922, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_SUSPENTHREAD_OR_RESUMETHREAD_BY_TID       CTL_CODE(IOCTL_UNKNOWN_BASE, 0x923, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_ENABLE_EXPAND_FUNCTION                    CTL_CODE(IOCTL_UNKNOWN_BASE, 0x924, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_ENABLE_DELETE_FILE                        CTL_CODE(IOCTL_UNKNOWN_BASE, 0x925, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)

#define STATUS_INVALID_PAGE_PROTECTION   ((NTSTATUS)0xC0000045L)
#define STATUS_PARTIAL_COPY              ((NTSTATUS)0x8000000DL)

#define WINDOWS_7 7600
#define WINDOWS_7_SP1 7601
#define WINDOWS_8 9200
#define WINDOWS_8_1 9600
#define WINDOWS_10_VERSION_THRESHOLD1 10240
#define WINDOWS_10_VERSION_THRESHOLD2 10586
#define WINDOWS_10_VERSION_REDSTONE1 14393
#define WINDOWS_10_VERSION_REDSTONE2 15063
#define WINDOWS_10_VERSION_REDSTONE3 16299
#define WINDOWS_10_VERSION_REDSTONE4 17134
#define WINDOWS_10_VERSION_REDSTONE5 17763
#define WINDOWS_10_VERSION_19H1 18362
#define WINDOWS_10_VERSION_19H2 18363
#define WINDOWS_10_VERSION_20H1 19041
#define WINDOWS_10_VERSION_20H2 19042
#define WINDOWS_10_VERSION_21H1 19043
#define WINDOWS_10_VERSION_21H2 19044
#define WINDOWS_10_VERSION_22H2 19045
#define WINDOWS_11 22000

#define PAGE_SIZE 0x1000
#define SYSTEM_ADDRESS_START 0x00007ffffffeffff


namespace DriverIo
{
	BOOL InstallDriver();
	void UnLoadDriver();


	BOOL __stdcall KernelReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesRead);
	BOOL __stdcall KernelWriteProcessMemory(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesWritten);
	BOOL __stdcall KernelVirtualProtectEx(HANDLE hProcess, PVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
	PVOID __stdcall KernelVirtualAllocEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
	HANDLE __stdcall ReWritreOpenProcess(DWORD dwDesiredAccess, DWORD dwProcessId);
	HANDLE __stdcall ReWritreOpenThread(DWORD dwDesiredAccess, DWORD dwThreadId);
	DWORD __stdcall SuspendOrResumeThread(HANDLE hThread, BOOL Suspend);
	BOOL __stdcall KernelGetOrSetThreadContext(HANDLE hThread, LPCONTEXT lpContext, BOOL bGet);
	BOOL __stdcall ObDuplicateObjectD(HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, 
		PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);
	BOOL __stdcall raise_ce_handle(DWORD dwPid);
	BOOL __stdcall WriteKernelemory(PVOID lpBaseAddress, PVOID lpBuffer, SIZE_T nSize);
	BOOL SetSystemNotify(ULONG nDebuggerProcessPid, ULONG nWatchPid, HANDLE hEvent);
	BOOL DbkSuspendProcess(ULONG nPid, ULONG nRecoverTid);
	BOOL DbkResumeProcess(ULONG nPid);
}

